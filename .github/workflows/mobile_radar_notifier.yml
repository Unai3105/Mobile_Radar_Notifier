name: Mobile Radar Notifier

on:
  schedule:
    - cron: '50 7 * * *'  # Se ejecuta a las 7:50 UTC de cada día (España -> UTC + 1)
  workflow_dispatch:

jobs:
  version-check:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Check Python version
        run: python --version

      - name: Check pip version
        run: pip --version

      - name: Check installed Python packages
        run: pip freeze

  scraping_and_sync:
    runs-on: ubuntu-latest

    steps:
    - name: Check out the code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # Paso 1: Ejecutar el script de sincronización de interacciones de Telegram a MongoDB
    - name: Run Telegram to MongoDB sync script
      env:
        TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
        MONGO_URI: ${{ secrets.MONGO_URI }}
        MONGO_DB: ${{ secrets.MONGO_DB }}
        MONGO_COLLECTION_INTERACTIONS: ${{ secrets.MONGO_COLLECTION_INTERACTIONS }}
      run: |
        python bot_interactions_updater.py

    # Paso 2: Ejecutar el script de scraping y envío de mensajes
    - name: Run Scraping & Sending messages script
      env:
        DONOSTI_RADAR_WEB: ${{ secrets.DONOSTI_RADAR_WEB }}
        TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
        MONGO_URI: ${{ secrets.MONGO_URI }}
        MONGO_DB: ${{ secrets.MONGO_DB }}
        MONGO_COLLECTION_INTERACTIONS: ${{ secrets.MONGO_COLLECTION_INTERACTIONS }}
        MONGO_COLLECTION_REPORTS: ${{ secrets.MONGO_COLLECTION_REPORTS }}
      run: |
        python telegram_radar_notifier.py
